services:
  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./config/receiver:/config
      - ./config/shared/log_conf.yml:/config/log_conf.yml 
      - ./logs/receiver:/app/logs 
    depends_on:
      kafka:
        condition: service_healthy

  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    volumes:
      - ./config/storage:/config
      - ./config/shared/log_conf.yml:/config/log_conf.yml    
      - ./logs/storage:/app/logs
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy  

  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    ports:
      - "8100:8100"
    volumes:
      - ./config/processing:/config
      - ./config/shared/log_conf.yml:/config/log_conf.yml 
      - ./logs/processing:/app/logs
      - ./data:/app/data
    depends_on:
      - storage
             
  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    ports:
      - "8110:8110"
    volumes:
      - ./config/analyzer:/config  
      - ./config/shared/log_conf.yml:/config/log_conf.yml 
      - ./logs/analyzer:/app/logs      
    depends_on:
      kafka:
       condition: service_healthy
  
  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - zookeeper-data:/data
      - zookeeper-log:/datalog

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - kafka-data:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234 
      MYSQL_USER: mysqluser
      MYSQL_PASSWORD: 1234
      MYSQL_DATABASE: mysimpletracker
    ports:
      - "3306:3306"
    volumes:
      - my-db:/var/lib/mysql  
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  my-db:
  kafka-data:
  zookeeper-data:
  zookeeper-log:
